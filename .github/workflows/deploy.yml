name: Build and Deploy to Cloudflare Workers

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  RUST_BACKTRACE: 1

jobs:
  test:
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache.outputs.cache-hit }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        components: rustfmt, clippy
        target: wasm32-unknown-unknown
        cache: false

    - name: Setup sccache
      uses: mozilla-actions/sccache-action@v0.0.5

    - name: Enhanced cargo cache
      id: cache
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
          ~/.cache/sccache/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles('**/Cargo.toml') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-
          ${{ runner.os }}-cargo-

    - name: Install worker-build
      run: |
        if ! command -v worker-build &> /dev/null; then
          cargo install worker-build --locked
        fi

    - name: Run tests
      run: cargo test
      env:
        RUSTC_WRAPPER: sccache

    - name: Run clippy
      run: cargo clippy -- -D warnings
      env:
        RUSTC_WRAPPER: sccache

    - name: Check formatting
      run: cargo fmt --check

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        target: wasm32-unknown-unknown
        cache: false

    - name: Setup sccache
      uses: mozilla-actions/sccache-action@v0.0.5

    - name: Restore cache
      uses: actions/cache/restore@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
          ~/.cache/sccache/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles('**/Cargo.toml') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-
          ${{ runner.os }}-cargo-

    - name: Install worker-build
      run: |
        if ! command -v worker-build &> /dev/null; then
          cargo install worker-build --locked
        fi

    - name: Build Rust Worker
      run: worker-build --release
      env:
        RUSTC_WRAPPER: sccache
        CARGO_PROFILE_RELEASE_LTO: thin
        CARGO_PROFILE_RELEASE_CODEGEN_UNITS: 1

    - name: Set deployment variables
      run: |
        BRANCH_NAME="${{ github.head_ref || github.ref_name }}"
        SANITIZED_BRANCH=$(echo "$BRANCH_NAME" | tr '/' '-' | tr '_' '-' | tr '[:upper:]' '[:lower:]')
        COMMIT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
        
        if [ "${{ github.event_name }}" = "push" ] && [ "$BRANCH_NAME" = "main" ]; then
          echo "VERSION_TAG=production-${COMMIT_SHA}" >> $GITHUB_ENV
          echo "VERSION_MESSAGE=Production deployment from main branch" >> $GITHUB_ENV
          echo "SHOULD_DEPLOY=true" >> $GITHUB_ENV
        elif [ "${{ github.event_name }}" = "pull_request" ]; then
          echo "VERSION_TAG=pr-${{ github.event.number }}-${COMMIT_SHA}" >> $GITHUB_ENV
          echo "VERSION_MESSAGE=PR #${{ github.event.number }}: ${{ github.event.pull_request.title }}" >> $GITHUB_ENV
          echo "SHOULD_DEPLOY=false" >> $GITHUB_ENV
          echo "PREVIEW_URL=https://hamrah-api-${SANITIZED_BRANCH}.hamrah.workers.dev" >> $GITHUB_ENV
        else
          echo "VERSION_TAG=branch-${SANITIZED_BRANCH}-${COMMIT_SHA}" >> $GITHUB_ENV  
          echo "VERSION_MESSAGE=Branch deployment: ${BRANCH_NAME}" >> $GITHUB_ENV
          echo "SHOULD_DEPLOY=false" >> $GITHUB_ENV
          echo "PREVIEW_URL=https://hamrah-api-${SANITIZED_BRANCH}.hamrah.workers.dev" >> $GITHUB_ENV
        fi

    - name: Upload Worker Version
      id: upload
      uses: cloudflare/wrangler-action@v3
      with:
        apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        command: versions upload --message "${{ env.VERSION_MESSAGE }}" --tag "${{ env.VERSION_TAG }}" --json
        
    - name: Extract Version ID
      if: env.SHOULD_DEPLOY == 'true'
      run: |
        VERSION_ID=$(echo '${{ steps.upload.outputs.command-output }}' | jq -r '.version_id // .result.id')
        echo "VERSION_ID=${VERSION_ID}" >> $GITHUB_ENV

    - name: Deploy to Production
      if: env.SHOULD_DEPLOY == 'true'
      uses: cloudflare/wrangler-action@v3
      with:
        apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        command: versions deploy --version-id ${{ env.VERSION_ID }} --percentage 100

    - name: Create Branch Deployment
      if: env.SHOULD_DEPLOY == 'false'
      uses: cloudflare/wrangler-action@v3
      with:
        apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        command: deploy --name hamrah-api-${{ github.head_ref || github.ref_name }}

    - name: Comment PR with preview URL
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const branchName = '${{ github.head_ref }}';
          const sanitizedBranch = branchName.replace(/[\/\_]/g, '-').toLowerCase();
          const previewUrl = `https://hamrah-api-${sanitizedBranch}.hamrah.workers.dev`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `ðŸš€ **Branch deployment ready!**
            
            **Preview URL:** ${previewUrl}
            **Branch:** \`${branchName}\`
            **Version:** \`${{ env.VERSION_TAG }}\`
            **Commit:** ${context.sha.substring(0, 7)}
            
            This deployment will remain active as long as the branch exists.`
          })